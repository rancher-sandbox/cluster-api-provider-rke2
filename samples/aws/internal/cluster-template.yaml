---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: ${NAMESPACE}
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: RKE2ControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
    kind: AWSCluster
    name: ${CLUSTER_NAME}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: AWSCluster
metadata:
  name: ${CLUSTER_NAME}
  namespace: ${NAMESPACE}
spec:
  bastion:
    enabled: true
  network:
    vpc:
      availabilityZoneUsageLimit: 1
    additionalControlPlaneIngressRules:
      - description: "RKE2 Control Plane additional group"
        protocol: "tcp"
        fromPort: 9345
        toPort: 9345
        sourceSecurityGroupRoles:
          - node
          - controlplane
  controlPlaneLoadBalancer:
      loadBalancerType: nlb
      additionalListeners:
        - port: 9345
          protocol: "TCP"
      ingressRules:
      - description: RKE2 Control Plane
        fromPort: 9345
        protocol: tcp
        sourceSecurityGroupRoles:
        - node
        - controlplane
        toPort: 9345
      - description: Kubernetes API
        fromPort: 6443
        protocol: tcp
        toPort: 6443
        cidrBlocks: 
        - "0.0.0.0/0"
  region: ${AWS_REGION}
  sshKeyName: ${AWS_SSH_KEY_NAME}

---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: RKE2ControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: ${NAMESPACE}
spec:
  version: ${RKE2_VERSION}
  preRKE2Commands:
  - sudo hostnamectl set-hostname $(curl -s http://169.254.169.254/1.0/meta-data/hostname)
  agentConfig:
    airGapped: true
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
    kind: AWSMachineTemplate
    name: ${CLUSTER_NAME}-control-plane
  nodeDrainTimeout: 2m
  replicas: ${CONTROL_PLANE_MACHINE_COUNT}
  serverConfig:
    cloudProviderName: aws
    cni: calico
    etcd:
      backupConfig:
        retention: "10"
        scheduleCron: "*/15 * * * *"
  registrationMethod: "internal-first"
  rolloutStrategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 1
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: AWSMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: ${NAMESPACE}
spec:
  template:
    spec:
      ami:
        id: ${AWS_AMI_ID}
      iamInstanceProfile: control-plane.cluster-api-provider-aws.sigs.k8s.io
      instanceType: ${AWS_CONTROL_PLANE_MACHINE_TYPE}
      rootVolume:
        size: 50
      sshKeyName: ${AWS_SSH_KEY_NAME}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: ${NAMESPACE}
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: ${CLUSTER_NAME}
    spec:
      clusterName: ${CLUSTER_NAME}
      version: ${RKE2_VERSION}
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: RKE2ConfigTemplate
          name: ${CLUSTER_NAME}-md-0
      infrastructureRef:
        name: ${CLUSTER_NAME}-md-0
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSMachineTemplate
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: AWSMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: ${NAMESPACE}
spec:
  template:
    spec:
      ami:
        id: ${AWS_AMI_ID}
      instanceType: "${AWS_NODE_MACHINE_TYPE}"
      iamInstanceProfile: "nodes.cluster-api-provider-aws.sigs.k8s.io"
      sshKeyName: "${AWS_SSH_KEY_NAME}"
      rootVolume: 
        size: 50
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: RKE2ConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: ${NAMESPACE}
spec: 
  template:
    spec:
      agentConfig:
        airGapped: true
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: AWSClusterControllerIdentity
metadata:
  name: default
  namespace: ${NAMESPACE}
spec:
  allowedNamespaces:
    list:
    - ${NAMESPACE}
    